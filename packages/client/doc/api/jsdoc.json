[
  {
    "description": "Client for the-server",
    "id": "module:@the-/client",
    "kind": "module",
    "license": "MIT",
    "longname": "module:@the-/client",
    "meta": {
      "filename": "index.js",
      "lineno": 2,
      "path": "lib"
    },
    "name": "@the-/client",
    "order": 2,
    "typicalname": "client",
    "version": "15.5.4"
  },
  {
    "id": "module:@the-/client.TheClient()",
    "kind": "constructor",
    "longname": "module:@the-/client.TheClient",
    "memberof": "module:@the-/client.TheClient",
    "name": "TheClient",
    "order": 5,
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "url"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "config"
      }
    ]
  },
  {
    "description": "Add callback function",
    "id": "addCallback",
    "kind": "function",
    "longname": "addCallback",
    "meta": {
      "filename": "asController.js",
      "lineno": 32,
      "path": "lib/helpers"
    },
    "name": "addCallback",
    "order": 15,
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "handleName"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "callbackFunc"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Cleanup functions"
      }
    ],
    "scope": "global"
  },
  {
    "description": "Add multiple callback functions at once",
    "id": "addCallbacks",
    "kind": "function",
    "longname": "addCallbacks",
    "meta": {
      "filename": "asController.js",
      "lineno": 46,
      "path": "lib/helpers"
    },
    "name": "addCallbacks",
    "order": 16,
    "params": [
      {
        "type": {
          "names": [
            "Object.<string, function()>"
          ]
        },
        "name": "callbackFuncs"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "cleanup function"
      }
    ],
    "scope": "global"
  },
  {
    "deprecated": true,
    "id": "delCallback",
    "kind": "function",
    "longname": "delCallback",
    "meta": {
      "filename": "asController.js",
      "lineno": 58,
      "path": "lib/helpers"
    },
    "name": "delCallback",
    "order": 17,
    "scope": "global"
  },
  {
    "description": "Remove callbacks",
    "id": "removeCallback",
    "kind": "function",
    "longname": "removeCallback",
    "meta": {
      "filename": "asController.js",
      "lineno": 74,
      "path": "lib/helpers"
    },
    "name": "removeCallback",
    "order": 18,
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "handleName"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "callbackFunc"
      }
    ],
    "scope": "global"
  },
  {
    "deprecated": true,
    "id": "setCallback",
    "kind": "function",
    "longname": "setCallback",
    "meta": {
      "filename": "asController.js",
      "lineno": 91,
      "path": "lib/helpers"
    },
    "name": "setCallback",
    "order": 19,
    "scope": "global"
  },
  {
    "id": "TheClientScope",
    "kind": "typedef",
    "longname": "TheClientScope",
    "meta": {
      "filename": "TheClient.js",
      "lineno": 397,
      "path": "lib"
    },
    "name": "TheClientScope",
    "order": 3,
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Client id",
        "name": "cid"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "callerKey"
      }
    ],
    "scope": "global",
    "type": {
      "names": [
        "Object"
      ]
    }
  },
  {
    "async": true,
    "description": "Invoke a method",
    "id": "module:@the-/client.TheClient#invoke",
    "kind": "function",
    "longname": "module:@the-/client.TheClient#invoke",
    "memberof": "module:@the-/client.TheClient",
    "meta": {
      "filename": "TheClient.js",
      "lineno": 187,
      "path": "lib"
    },
    "name": "invoke",
    "order": 8,
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "moduleName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of method to invoke",
        "name": "methodName"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "variable": true,
        "description": "Parameters",
        "name": "params"
      }
    ],
    "scope": "instance"
  },
  {
    "async": true,
    "description": "Create an stream to server",
    "id": "module:@the-/client.TheClient#stream",
    "kind": "function",
    "longname": "module:@the-/client.TheClient#stream",
    "memberof": "module:@the-/client.TheClient",
    "meta": {
      "filename": "TheClient.js",
      "lineno": 299,
      "path": "lib"
    },
    "name": "stream",
    "order": 9,
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "name"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Stream params",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Optional setting",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "With debug mode",
        "name": "options.debug"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        }
      }
    ],
    "scope": "instance"
  },
  {
    "async": true,
    "description": "Use a controller module",
    "id": "module:@the-/client.TheClient#use",
    "kind": "function",
    "longname": "module:@the-/client.TheClient#use",
    "memberof": "module:@the-/client.TheClient",
    "meta": {
      "filename": "TheClient.js",
      "lineno": 316,
      "path": "lib"
    },
    "name": "use",
    "order": 10,
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Module name",
        "name": "controllerName"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Optional setting",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "With debug mode",
        "name": "options.debug"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        }
      }
    ],
    "scope": "instance"
  },
  {
    "async": true,
    "description": "Use all controller modules",
    "id": "module:@the-/client.TheClient#useAll",
    "kind": "function",
    "longname": "module:@the-/client.TheClient#useAll",
    "memberof": "module:@the-/client.TheClient",
    "meta": {
      "filename": "TheClient.js",
      "lineno": 364,
      "path": "lib"
    },
    "name": "useAll",
    "order": 11,
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Optional setting",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Object>"
          ]
        }
      }
    ],
    "scope": "instance"
  },
  {
    "async": true,
    "description": "Fetch server info",
    "id": "module:@the-/client.mixins.infoMix~InfoMixed#serverInfo",
    "kind": "function",
    "longname": "module:@the-/client.mixins.infoMix~InfoMixed#serverInfo",
    "memberof": "module:@the-/client.mixins.infoMix~InfoMixed",
    "meta": {
      "filename": "infoMix.js",
      "lineno": 28,
      "path": "lib/mixins"
    },
    "name": "serverInfo",
    "order": 27,
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Object>"
          ]
        }
      }
    ],
    "scope": "instance"
  },
  {
    "description": "Send ping to the serve and callback when pong received",
    "id": "module:@the-/client.mixins.pingPongMix~PingPongMixed#pingPongAnd",
    "kind": "function",
    "longname": "module:@the-/client.mixins.pingPongMix~PingPongMixed#pingPongAnd",
    "memberof": "module:@the-/client.mixins.pingPongMix~PingPongMixed",
    "meta": {
      "filename": "pingPongMix.js",
      "lineno": 23,
      "path": "lib/mixins"
    },
    "name": "pingPongAnd",
    "order": 30,
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Callback func",
        "name": "callback"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Optional setting",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "instance"
  },
  {
    "async": true,
    "description": "Fetch server info",
    "id": "module:@the-/client.TheClient#serverInfo",
    "inherited": true,
    "inherits": "module:@the-/client.mixins.infoMix~InfoMixed#serverInfo",
    "kind": "function",
    "longname": "module:@the-/client.TheClient#serverInfo",
    "memberof": "module:@the-/client.TheClient",
    "meta": {
      "filename": "infoMix.js",
      "lineno": 28,
      "path": "lib/mixins"
    },
    "name": "serverInfo",
    "order": 33,
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Object>"
          ]
        }
      }
    ],
    "scope": "instance"
  },
  {
    "description": "Send ping to the serve and callback when pong received",
    "id": "module:@the-/client.TheClient#pingPongAnd",
    "inherited": true,
    "inherits": "module:@the-/client.mixins.pingPongMix~PingPongMixed#pingPongAnd",
    "kind": "function",
    "longname": "module:@the-/client.TheClient#pingPongAnd",
    "memberof": "module:@the-/client.TheClient",
    "meta": {
      "filename": "pingPongMix.js",
      "lineno": 23,
      "path": "lib/mixins"
    },
    "name": "pingPongAnd",
    "order": 34,
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Callback func",
        "name": "callback"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Optional setting",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "instance"
  },
  {
    "augments": [
      "module:@the-/client.mixins.infoMix~InfoMixed",
      "module:@the-/client.mixins.streamMix~StreamMixed",
      "module:@the-/client.TheClientBase",
      "module:@the-/client.mixins.pingPongMix~PingPongMixed"
    ],
    "id": "module:@the-/client.TheClient",
    "kind": "class",
    "longname": "module:@the-/client.TheClient",
    "memberof": "module:@the-/client",
    "meta": {
      "filename": "TheClient.js",
      "lineno": 2,
      "path": "lib"
    },
    "name": "TheClient",
    "order": 4,
    "scope": "static"
  },
  {
    "access": "protected",
    "id": "module:@the-/client.TheClientBase",
    "kind": "class",
    "longname": "module:@the-/client.TheClientBase",
    "memberof": "module:@the-/client",
    "meta": {
      "filename": "TheClient.js",
      "lineno": 33,
      "path": "lib"
    },
    "name": "TheClientBase",
    "order": 6,
    "scope": "static"
  },
  {
    "description": "Constant variables",
    "id": "module:@the-/client.constants",
    "kind": "namespace",
    "longname": "module:@the-/client.constants",
    "memberof": "module:@the-/client",
    "meta": {
      "filename": "index.js",
      "lineno": 2,
      "path": "lib/constants"
    },
    "name": "constants",
    "order": 12,
    "scope": "static"
  },
  {
    "description": "Events for IO",
    "id": "module:@the-/client.constants.IOEvents",
    "kind": "namespace",
    "longname": "module:@the-/client.constants.IOEvents",
    "memberof": "module:@the-/client.constants",
    "meta": {
      "filename": "IOEvents.js",
      "lineno": 2,
      "path": "lib/constants"
    },
    "name": "IOEvents",
    "order": 13,
    "scope": "static"
  },
  {
    "access": "protected",
    "description": "Helper functions",
    "id": "module:@the-/client.helpers",
    "kind": "namespace",
    "longname": "module:@the-/client.helpers",
    "memberof": "module:@the-/client",
    "meta": {
      "filename": "index.js",
      "lineno": 2,
      "path": "lib/helpers"
    },
    "name": "helpers",
    "order": 22,
    "scope": "static"
  },
  {
    "description": "Client mixin functions",
    "id": "module:@the-/client.mixins",
    "kind": "namespace",
    "longname": "module:@the-/client.mixins",
    "memberof": "module:@the-/client",
    "meta": {
      "filename": "index.js",
      "lineno": 2,
      "path": "lib/mixins"
    },
    "name": "mixins",
    "order": 24,
    "scope": "static"
  },
  {
    "description": "Create a TheClient instance",
    "id": "module:@the-/client.create",
    "kind": "function",
    "longname": "module:@the-/client.create",
    "memberof": "module:@the-/client",
    "meta": {
      "filename": "create.js",
      "lineno": 2,
      "path": "lib"
    },
    "name": "create",
    "order": 0,
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "variable": true,
        "name": "args"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TheClient"
          ]
        }
      }
    ],
    "scope": "static"
  },
  {
    "description": "Default exports",
    "id": "module:@the-/client.default",
    "kind": "function",
    "longname": "module:@the-/client.default",
    "memberof": "module:@the-/client",
    "meta": {
      "filename": "default.js",
      "lineno": 2,
      "path": "lib"
    },
    "name": "default",
    "order": 1,
    "scope": "static"
  },
  {
    "description": "Create the client instance",
    "id": "module:@the-/client.TheClient.for",
    "kind": "function",
    "longname": "module:@the-/client.TheClient.for",
    "memberof": "module:@the-/client.TheClient",
    "meta": {
      "filename": "TheClient.js",
      "lineno": 53,
      "path": "lib"
    },
    "name": "for",
    "order": 7,
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "namespace",
        "defaultvalue": "default"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "name": "config"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TheClient"
          ]
        }
      }
    ],
    "scope": "static"
  },
  {
    "id": "module:@the-/client.helpers.asController",
    "kind": "function",
    "longname": "module:@the-/client.helpers.asController",
    "memberof": "module:@the-/client.helpers",
    "meta": {
      "filename": "asController.js",
      "lineno": 2,
      "path": "lib/helpers"
    },
    "name": "asController",
    "order": 14,
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "instance"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "spec"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "context"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "name": "options"
      }
    ],
    "returns": [
      {
        "description": "Object"
      }
    ],
    "scope": "static"
  },
  {
    "description": "Wrap controller instance with debug utility",
    "id": "module:@the-/client.helpers.debugController",
    "kind": "function",
    "longname": "module:@the-/client.helpers.debugController",
    "memberof": "module:@the-/client.helpers",
    "meta": {
      "filename": "debugController.js",
      "lineno": 2,
      "path": "lib/helpers"
    },
    "name": "debugController",
    "order": 20,
    "scope": "static"
  },
  {
    "description": "Wrap stream with debug utility",
    "id": "module:@the-/client.helpers.debugStream",
    "kind": "function",
    "longname": "module:@the-/client.helpers.debugStream",
    "memberof": "module:@the-/client.helpers",
    "meta": {
      "filename": "debugStream.js",
      "lineno": 2,
      "path": "lib/helpers"
    },
    "name": "debugStream",
    "order": 21,
    "scope": "static"
  },
  {
    "description": "Parse caller URL",
    "id": "module:@the-/client.helpers.parseClientUrl",
    "kind": "function",
    "longname": "module:@the-/client.helpers.parseClientUrl",
    "memberof": "module:@the-/client.helpers",
    "meta": {
      "filename": "parseClientUrl.js",
      "lineno": 2,
      "path": "lib/helpers"
    },
    "name": "parseClientUrl",
    "order": 23,
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "string"
          ]
        },
        "description": "URL string or config"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- Parsed url"
      }
    ],
    "scope": "static"
  },
  {
    "id": "module:@the-/client.mixins.infoMix",
    "kind": "function",
    "longname": "module:@the-/client.mixins.infoMix",
    "memberof": "module:@the-/client.mixins",
    "meta": {
      "filename": "infoMix.js",
      "lineno": 2,
      "path": "lib/mixins"
    },
    "name": "infoMix",
    "order": 25,
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "Class"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static"
  },
  {
    "id": "module:@the-/client.mixins.pingPongMix",
    "kind": "function",
    "longname": "module:@the-/client.mixins.pingPongMix",
    "memberof": "module:@the-/client.mixins",
    "meta": {
      "filename": "pingPongMix.js",
      "lineno": 2,
      "path": "lib/mixins"
    },
    "name": "pingPongMix",
    "order": 28,
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Class to mix",
        "name": "Class"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Mixed class"
      }
    ],
    "scope": "static"
  },
  {
    "id": "module:@the-/client.mixins.streamMix",
    "kind": "function",
    "longname": "module:@the-/client.mixins.streamMix",
    "memberof": "module:@the-/client.mixins",
    "meta": {
      "filename": "streamMix.js",
      "lineno": 2,
      "path": "lib/mixins"
    },
    "name": "streamMix",
    "order": 31,
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "scope": "static"
  },
  {
    "id": "module:@the-/client.mixins.infoMix~InfoMixed",
    "kind": "class",
    "longname": "module:@the-/client.mixins.infoMix~InfoMixed",
    "memberof": "module:@the-/client.mixins.infoMix",
    "meta": {
      "filename": "infoMix.js",
      "lineno": 18,
      "path": "lib/mixins"
    },
    "name": "InfoMixed",
    "order": 26,
    "scope": "inner"
  },
  {
    "id": "module:@the-/client.mixins.pingPongMix~PingPongMixed",
    "kind": "class",
    "longname": "module:@the-/client.mixins.pingPongMix~PingPongMixed",
    "memberof": "module:@the-/client.mixins.pingPongMix",
    "meta": {
      "filename": "pingPongMix.js",
      "lineno": 16,
      "path": "lib/mixins"
    },
    "name": "PingPongMixed",
    "order": 29,
    "scope": "inner"
  },
  {
    "id": "module:@the-/client.mixins.streamMix~StreamMixed",
    "kind": "class",
    "longname": "module:@the-/client.mixins.streamMix~StreamMixed",
    "memberof": "module:@the-/client.mixins.streamMix",
    "meta": {
      "filename": "streamMix.js",
      "lineno": 148,
      "path": "lib/mixins"
    },
    "name": "StreamMixed",
    "order": 32,
    "scope": "inner"
  }
]
