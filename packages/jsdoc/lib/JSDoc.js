'use strict'

/**
 * @memberof module:@the-/jsdoc
 * @class JSDoc
 */
const aglob = require('aglob')
const { sortProperties } = require('fmtjson')
const jsdocToMarkdown = require('jsdoc-to-markdown')
const { EOL } = require('os')
const path = require('path')
const writeout = require('writeout')
const { uniqueFilter } = require('@the-/util-array')

/** @lends module:@the-/jsdoc._JSDoc */
class JSDoc {
  constructor(options = {}) {
    const { logging = console.log, prefix = '@the-/jsdoc' } = options
    this.prefix = prefix
    this.logging = logging
  }

  bind() {
    const generate = this.generate.bind(this)
    return Object.assign(generate, {
      generate,
    })
  }
  async generate(src = process.cwd(), dest = 'doc/api', options = {}) {
    const {
      cwd = process.cwd(),
      ignore = [],
      jsonFile = 'jsdoc.json',
      mdFile = 'api.md',
      patterns = ['lib/*.js', 'lib/**/*.js', 'lib/*.jsx', 'lib/**/*.jsx'],
    } = options
    const filenames = (await aglob(patterns, { cwd: src, ignore }))
      .map((filename) => path.resolve(src, filename))
      .filter(uniqueFilter())

    // Render json file
    if (jsonFile) {
      const data = (await jsdocToMarkdown.getTemplateData({
        files: filenames,
      })).map((data) => {
        if (data.meta && data.meta.path) {
          data.meta.path = path.join('.', path.relative(cwd, data.meta.path))
        }

        return data
      })
      await this.write(
        path.resolve(dest, jsonFile),
        JSON.stringify(sortProperties(data), null, 2) + EOL,
      )
    }

    // Render md file
    if (mdFile) {
      const rendered = await jsdocToMarkdown.render({
        files: filenames,
      })
      await this.write(
        path.resolve(dest, mdFile),
        `<!--- Code generated by @the-/script-doc. DO NOT EDIT. -->

${rendered}`,
      )
    }
  }

  async write(filename, content, options = {}) {
    const { mode = '444' } = options
    const { skipped } = await writeout(filename, content, {
      force: true,
      mkdirp: true,
      mode,
      skipIfIdentical: true,
    })
    if (!skipped) {
      const generated = path.relative(process.cwd(), filename)
      this.logging &&
        this.logging(`[${this.prefix}] File generated: ${generated}`)
    }
  }
}

module.exports = JSDoc
