/**
 * @memberof module:jsdoc
 * @class Jsdoc
 */
'use strict'

const aglob = require('aglob')
const jsdocToMarkdown = require('jsdoc-to-markdown')
const { EOL } = require('os')
const path = require('path')
const writeout = require('writeout')
const { uniqueFilter } = require('@the-/util-array')

/** @lends module:jsdoc.Jsdoc */
class Jsdoc {
  constructor(options = {}) {
    const { logging = console.log, prefix = '@the-/jsdoc' } = options
    this.prefix = prefix
    this.logging = logging
  }

  bind() {
    const generate = this.generate.bind(this)
    return Object.assign(generate, {
      generate,
    })
  }
  async generate(src = process.cwd(), out = 'doc/api', options = {}) {
    const {
      ignore = [],
      jsonFile = 'jsdoc.json',
      mdFile = 'api.md',
      patterns = ['lib/*.js', 'lib/**/*.js', 'lib/*.jsx', 'lib/**/*.jsx'],
    } = options
    const filenames = (await aglob(patterns, { cwd: src, ignore }))
      .map((filename) => path.resolve(src, filename))
      .filter(uniqueFilter())

    // Render json file
    if (jsonFile) {
      const data = await jsdocToMarkdown.getTemplateData({ files: filenames })
      await this.write(
        path.resolve(out, jsonFile),
        JSON.stringify(data, null, 2) + EOL,
      )
    }

    // Render md file
    if (mdFile) {
      const rendered = await jsdocToMarkdown.render({
        files: filenames,
      })
      await this.write(
        path.resolve(out, mdFile),
        `<!--- Code generated by @the-/script-doc. DO NOT EDIT. -->

${rendered}`,
      )
    }
  }

  async write(filename, content) {
    const { skipped } = await writeout(filename, content, {
      force: true,
      mkdirp: true,
      skipIfIdentical: true,
    })
    if (!skipped) {
      this.logging &&
        this.logging(
          `[${this.prefix}] File generated: ${path.relative(
            process.cwd(),
            filename,
          )}`,
        )
    }
  }
}

module.exports = Jsdoc
